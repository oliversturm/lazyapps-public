using System.Text;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;

IConnection Connect(ConnectionFactory factory) {
  IConnection connection;
  int tries = 0;
  const int maxTries = 10;
  while (tries < maxTries) {
    try {
      connection = factory.CreateConnection();
      return connection;
    }
    catch {
      Console.WriteLine($"Attempt {tries + 1} failed connecting to RabbitMQ.");
      tries++;
      Thread.Sleep(1000);
    }
  }
  throw new Exception($"Couldn't connect to RabbitMQ in {maxTries} attempts.");
}

var factory = new ConnectionFactory();
factory.Uri = new Uri(Environment.GetEnvironmentVariable("RABBIT_URL") ?? "amqp://localhost");

using (var connection = Connect(factory)) {
  using (var channel = connection.CreateModel()) {
    var exchange = "events";

    channel.ExchangeDeclare(exchange: exchange, type: ExchangeType.Topic);

    var queueName = channel.QueueDeclare().QueueName;
    channel.QueueBind(queue: queueName,
                          exchange: exchange,
                          routingKey: "#");

    var consumer = new EventingBasicConsumer(channel);
    consumer.Received += (model, ea) => {
      var body = ea.Body.ToArray();
      var message = Encoding.UTF8.GetString(body);
      var routingKey = ea.RoutingKey;
      Console.WriteLine($"Received for key '{routingKey}':'{message}'");
    };
    channel.BasicConsume(queue: queueName,
                         autoAck: true,
                         consumer: consumer);

    var cancelEvent = new ManualResetEvent(false);

    Console.CancelKeyPress += (s, ea) => {
      cancelEvent.Set();
      ea.Cancel = true;
    };

    Console.WriteLine(".NET Read Model listening");

    cancelEvent.WaitOne();
  }
}